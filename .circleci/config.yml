version: 2
jobs:
  build:
    working_directory: ~/working_directory
    docker:
      - image: circleci/node:14.18.2-browsers
        env:
          - DISPLAY=:99
          - CHROME_BIN=/usr/bin/google-chrome
    steps:
      - checkout
      - run:
          name: Install npm
          command: sudo npm install -g npm@latest
      - run:
          name: Print system information
          command: |
            echo "node $(node -v)"
            echo "npm v$(npm --version)"
            echo "$(google-chrome --version)"
      - run:
          name: Install coveralls and gulp globally
          command: sudo npm install -g  add coveralls gulp
      - run:
          name: Install rsync
          command: sudo apt install -y rsync

      # Core dependencies
      - restore_cache:
          keys:
            - v1-onsenui-cache-{{ .Branch }}-{{ checksum "package-lock.json" }}
            - v1-onsenui-cache-{{ .Branch }}-
            - v1-onsenui-cache-
      - run:
          name: Install dependencies
          command: npm ci
      - save_cache:
          key: v1-onsenui-cache-{{ .Branch }}-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
            - ./vue3-onsenui/node_modules
            - ./vue3-onsenui-examples/node_modules
            - ./react-onsenui/node_modules
            - ./react-onsenui-examples/node_modules

      # bindings/angular1
      # TODO: For now, needs to be before the core build. After 2.11.0, this should be moved below it.
      - restore_cache:
          keys:
            - v1-angular1-cache-{{ .Branch }}-{{ checksum "onsenui/bindings/angular1/package-lock.json" }}
            - v1-angular1-cache-{{ .Branch }}-
            - v1-angular1-cache-
      - run:
          name: Install AngularJS dependencies and build anglarjs-onsenui
          command: |
            cd onsenui/bindings/angular1
            npm ci
            npm run build
      - save_cache:
          key: v1-angular1-cache-{{ .Branch }}-{{ checksum "onsenui/bindings/angular1/package-lock.json" }}
          paths:
            - ./onsenui/bindings/angular1/node_modules

      # Core build
      - run:
          name: Building Onsen UI core
          command: npm run build

      # ngx-onsenui
      - restore_cache:
          keys:
            - v1-angular2-cache-{{ .Branch }}-{{ checksum "ngx-onsenui/package-lock.json" }}
            - v1-angular2-cache-{{ .Branch }}-
            - v1-angular2-cache-
      - run:
          name: Install Angular 2 dependencies and build ngx-onsenui
          command: |
            cd ngx-onsenui
            npm ci
            npm run build
      - save_cache:
          key: v1-angular2-cache-{{ .Branch }}-{{ checksum "ngx-onsenui/package-lock.json" }}
          paths:
            - ./ngx-onsenui/node_modules

      # bindings/react
      - run:
          name: Build react-onsenui
          command: |
            npm run build:react

      # bindings/vue3
      - run:
          name: Build vue-onsenui for Vue 3
          command: |
            npm run build:vue

      # bindings/vue2
      - restore_cache:
          keys:
            - v1-vue-cache-{{ .Branch }}-{{ checksum "vue-onsenui/package-lock.json" }}
            - v1-vue-cache-{{ .Branch }}-
            - v1-vue-cache-
      - run:
          name: Install Vue 2 dependencies and build vue-onsenui for Vue 2
          command: |
            cd vue-onsenui
            npm ci
            npm run build
      - save_cache:
          key: v1-vue-cache-{{ .Branch }}-{{ checksum "vue-onsenui/package-lock.json" }}
          paths:
            - ./vue-onsenui/node_modules

      # Tests
      - run:
          name: Run OnsenUI Tests
          command: npm run --prefix onsenui test

      - run:
          name: Run AngularJS tests
          command: cd onsenui/bindings/angular1; npm test

      #- run: cd bindings/angular2; npm test
      #- run: cd bindings/vue; npm test
      #- run:
      #    name: Run React tests
      #    command: npm run test:react
      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit
            find . -type f -regex "./onsenui/.*xml" -exec cp {} ~/junit/ \;
            cat ./core/test/unit/coverage/*/lcov.info | coveralls || true # Ignore if this fails.
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit

      - deploy:
          name: Deployment
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              mkdir -p ~/artifacts
              CURRENT_VERSION=$(node -e "console.log(require('./package.json').version)")
              npm version "$CURRENT_VERSION-build.$CIRCLE_BUILD_NUM" --no-git-tag-version
              npm pack --pack-destination ~/artifacts
            fi
      - store_artifacts:
          path: ~/artifacts
